{"version":3,"sources":["components/Setter/Setter.module.css","components/Tablo/Tablo.module.css","components/Button/Button.module.css","components/Button/Button.tsx","components/Tablo/Tablo.tsx","components/Setter/Setter.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Button","props","className","classes","button","onClick","value","disabled","title","Tablo","toggler","max","error","tablo","number","Setter","errorClassToggler","min","setter","label","input","type","onChange","e","setMax","parseInt","currentTarget","setMin","App","useState","counter","setCounter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"4EACAA,EAAOC,QAAU,CAAC,OAAS,uBAAuB,MAAQ,sBAAsB,MAAQ,sBAAsB,MAAQ,wB,gBCAtHD,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,MAAQ,qBAAqB,OAAS,wB,mBCArFD,EAAOC,QAAU,CAAC,OAAS,yB,wLCSpB,SAASC,EAAOC,GACnB,OACE,4BAAQC,UAAWC,IAAQC,OAAQC,QAAS,kBAAIJ,EAAMI,QAAQJ,EAAMK,QAAQC,SAAUN,EAAMM,UAAWN,EAAMO,O,oBCKpGC,MATf,SAAgBR,GACZ,IAAIS,EAAUT,EAAMK,MAAQL,EAAMU,IAAM,GAAKR,IAAQS,MACrD,OACE,yBAAKV,UAAWC,IAAQU,MAAQ,IAAMH,GAClC,yBAAKR,UAAWC,IAAQW,QAASb,EAAMK,S,gBCD1C,SAASS,EAAOd,GAEnB,IAAIe,EAAoBf,EAAMgB,IAAMhB,EAAMU,KAAqB,IAAdV,EAAMU,IAAY,GAAKR,IAAQS,MAEhF,OACE,yBAAKV,UAAWC,IAAQe,QACpB,yBAAKhB,UAAWC,IAAQgB,OAAxB,gBACA,2BAAOjB,UAAWC,IAAQiB,MAAS,IAAMJ,EAClCK,KAAK,SACLf,MAAOL,EAAMU,IACbW,SAAU,SAACC,GAAD,OAAKtB,EAAMuB,OAAOC,SAASF,EAAEG,cAAcpB,WAE5D,yBAAKJ,UAAWC,IAAQgB,OAAxB,gBACA,2BAAOjB,UAAWC,IAAQiB,MAAQ,IAAMJ,EACjCK,KAAK,SACLf,MAAOL,EAAMgB,IACbK,SAAU,SAACC,GAAD,OAAKtB,EAAM0B,OAAOF,SAASF,EAAEG,cAAcpB,YCcvDsB,MAnCf,WAAgB,IAAD,EAEiBC,mBAAS,GAF1B,mBAENC,EAFM,KAEGC,EAFH,OAISF,mBAAiB,GAJ1B,mBAINlB,EAJM,KAIDa,EAJC,OAKSK,mBAAiB,GAL1B,mBAKNZ,EALM,KAKDU,EALC,KAmBX,OACE,yBAAKzB,UAAU,OACX,yBAAKA,UAAU,WACX,kBAACa,EAAD,CAAQT,MAAOwB,EAASb,IAAKA,EAAKN,IAAKA,EAAKgB,OAAQA,EAAQH,OAAQA,KAExE,yBAAKtB,UAAU,WACX,kBAAC,EAAD,CAAOI,MAAOwB,EAASnB,IAAKA,IAC5B,6BACI,kBAACX,EAAD,CAAQK,QApBtB,SAA0ByB,GACnBA,EAAUnB,GACToB,EAAWD,GAAS,IAkBoBxB,MAAOwB,EAAStB,MAAO,MAAOD,SAAUuB,GAAWnB,IACrF,kBAACX,EAAD,CAAQK,QAftB,WACI0B,EAAW,IAc8BzB,MAAOwB,EAAStB,MAAO,QAASD,SAAsB,IAAZuB,QCtBvEE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAApC,GACLqC,QAAQrC,MAAMA,EAAMsC,c","file":"static/js/main.4924ab17.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"setter\":\"Setter_setter__13cV2\",\"input\":\"Setter_input__NMadY\",\"error\":\"Setter_error__1lQro\",\"label\":\"Setter_label__RbyrU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tablo\":\"Tablo_tablo__251sg\",\"error\":\"Tablo_error__36Z5L\",\"number\":\"Tablo_number__2z4gQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__33L2G\"};","import React from \"react\";\r\nimport classes from \"./Button.module.css\";\r\n\r\ntype ButtonPropsType = {\r\n    onClick: (value: number) => void\r\n    value: number\r\n    title: string\r\n    disabled: boolean\r\n}\r\n\r\nexport function Button(props: ButtonPropsType) {\r\n    return (\r\n      <button className={classes.button} onClick={()=>props.onClick(props.value)} disabled={props.disabled}>{props.title}</button>\r\n    )\r\n}","import React from \"react\";\r\nimport classes from \"./Tablo.module.css\";\r\n\r\ntype TabloPropsType = {\r\n    value: number\r\n    max: number\r\n}\r\n\r\nfunction Tablo (props: TabloPropsType) {\r\n    let toggler = props.value < props.max ? \"\" : classes.error;\r\n    return (\r\n      <div className={classes.tablo + \" \" + toggler}>\r\n          <div className={classes.number}>{props.value}</div>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default Tablo;","import React, {useState} from \"react\";\r\nimport classes from \"./Setter.module.css\";\r\n\r\ntype SetterPropsType = {\r\n    value: number\r\n    min: number\r\n    max: number\r\n    setMin: (min: number) => void\r\n    setMax: (max: number) => void\r\n}\r\n\r\nexport function Setter(props: SetterPropsType) {\r\n\r\n    let errorClassToggler = props.min < props.max && props.max !== 0 ? \"\" : classes.error;\r\n\r\n    return (\r\n      <div className={classes.setter}>\r\n          <div className={classes.label}>Max Value : </div>\r\n          <input className={classes.input  + \" \" + errorClassToggler}\r\n                 type=\"number\"\r\n                 value={props.max}\r\n                 onChange={(e)=>props.setMax(parseInt(e.currentTarget.value))}\r\n          />\r\n          <div className={classes.label}>Min Value : </div>\r\n          <input className={classes.input + \" \" + errorClassToggler}\r\n                 type=\"number\"\r\n                 value={props.min}\r\n                 onChange={(e)=>props.setMin(parseInt(e.currentTarget.value))}\r\n          />\r\n      </div>\r\n    )\r\n}","import React, {useState} from 'react';\nimport './App.css';\nimport {Button} from \"./components/Button/Button\";\nimport Tablo from './components/Tablo/Tablo';\nimport { Setter } from './components/Setter/Setter';\n\nfunction App() {\n\n    let [counter, setCounter] = useState(0)\n\n    let [max, setMax] = useState<number>(0)\n    let [min, setMin] = useState<number>(0)\n\n    function IncreaseCounter (counter: number) {\n        if(counter < max) {\n            setCounter(counter+=1);\n        }\n    }\n\n    function ResetCounter() {\n        setCounter(0);\n    }\n\n\n\n    return (\n      <div className=\"App\">\n          <div className=\"Wrapper\">\n              <Setter value={counter} min={min} max={max} setMin={setMin} setMax={setMax}/>\n          </div>\n          <div className=\"Wrapper\">\n              <Tablo value={counter} max={max}/>\n              <div>\n                  <Button onClick={IncreaseCounter} value={counter} title={\"Inc\"} disabled={counter >= max}/>\n                  <Button onClick={ResetCounter} value={counter} title={\"Reset\"} disabled={counter === 0}/>\n              </div>\n          </div>\n      </div>\n    );\n}\n\nexport default App;\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}